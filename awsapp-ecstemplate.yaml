AWSTemplateFormatVersion: '2010-09-09'
Description: 'ECS Cluster, Service, and Task Definitions'

Parameters:
  EnvironmentName:
    Type: String
    Default: 'prod'
    Description: Environment name, must match the VPC stack
  ContainerPort:
    Type: Number
    Default: 8080
    Description: Port on which the container listens

Resources:
  # IAM Roles
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: '*'

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: '*'

  # Load Balancer Security Group
  LoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the load balancer
      VpcId:
        Fn::ImportValue: !Sub '${EnvironmentName}-VPC'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # ECS Tasks Security Group
  ECSTaskSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the ECS tasks
      VpcId:
        Fn::ImportValue: !Sub '${EnvironmentName}-VPC'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !Ref LoadBalancerSG

  # Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${EnvironmentName}-alb
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Subnets:
        - Fn::ImportValue: !Sub '${EnvironmentName}-PublicSubnet1'
        - Fn::ImportValue: !Sub '${EnvironmentName}-PublicSubnet2'
      SecurityGroups:
        - !Ref LoadBalancerSG
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-alb

  # Target Groups (Fixed Port references)
  BlueTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-tg-blue
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Fn::ImportValue: !Sub '${EnvironmentName}-VPC'
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: '200-299'

  GreenTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-tg-green
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Fn::ImportValue: !Sub '${EnvironmentName}-VPC'
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: '200-299'

  # Listeners
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref BlueTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ALBTestListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref GreenTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 8081
      Protocol: HTTP

  # CloudWatch Log Group
  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${EnvironmentName}
      RetentionInDays: 30

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${EnvironmentName}-cluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1

  # ECS Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${EnvironmentName}-task1
      Cpu: 512
      Memory: 1024
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: !Sub ${EnvironmentName}-container
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/imagegallery-apprepo:latest'
          Essential: true
          PortMappings:
            - ContainerPort:
                Ref: ContainerPort
              HostPort:
                Ref: ContainerPort
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: CloudWatchLogGroup
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: ecs
          Environment:
            - Name: S3_BUCKET_NAME
              Value:
                Fn::ImportValue:
                  !Sub '${EnvironmentName}-S3BucketName'
            - Name: SPRING_ACTIVE_PROFILE
              Value: prod
          Secrets:
            - Name: DB_USERNAME
              ValueFrom:
                Fn::Join:
                  - ''
                  - - Fn::ImportValue:
                        !Sub '${EnvironmentName}-SecretARN'
                    - ':username::'
            - Name: DB_PASSWORD
              ValueFrom:
                Fn::Join:
                  - ''
                  - - Fn::ImportValue:
                        !Sub '${EnvironmentName}-SecretARN'
                    - ':password::'
            - Name: DB_HOST
              ValueFrom:
                Fn::Join:
                  - ''
                  - - Fn::ImportValue:
                        !Sub '${EnvironmentName}-SecretARN'
                    - ':host::'
            - Name: DB_PORT
              ValueFrom:
                Fn::Join:
                  - ''
                  - - Fn::ImportValue:
                        !Sub '${EnvironmentName}-SecretARN'
                    - ':port::'
            - Name: DB_NAME
              ValueFrom:
                Fn::Join:
                  - ''
                  - - Fn::ImportValue:
                        !Sub '${EnvironmentName}-SecretARN'
                    - ':dbname::'

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      ServiceName: !Sub ${EnvironmentName}-service
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 2
      LaunchType: FARGATE
      DeploymentController:
        Type: CODE_DEPLOY
      LoadBalancers:
        - TargetGroupArn: !Ref BlueTargetGroup
          ContainerName: !Sub ${EnvironmentName}-container
          ContainerPort: !Ref ContainerPort
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ECSTaskSG
          Subnets:
            - Fn::ImportValue: !Sub '${EnvironmentName}-PrivateSubnet1'
            - Fn::ImportValue: !Sub '${EnvironmentName}-PrivateSubnet2'

  # Auto Scaling
  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 6
      MinCapacity: 2
      ResourceId: !Join
        - /
        - - service
          - !Ref ECSCluster
          - !GetAtt ECSService.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs